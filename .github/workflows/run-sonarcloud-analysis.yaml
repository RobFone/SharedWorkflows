name: SonarCloud Report Generation

on:
  workflow_call:
    inputs:
      solutionFile:
        required: true
        type: string
      buildConfiguration:
        required: false
        type: string
        default: Release
      dockerComposeFile:
        required: false
        type: string
      dotnetVersion:
        required: false
        type: string
        default: "6.0.302"
      testVerbosity:
        required: false
        type: string
        default: "minimal"
      sonarOrg:
        required: false
        type: string
        default: "confuzed"
      sonarProjectKey:
        required: true
        type: string
      sonarBeVerbose:
        type: boolean
        default: false
        required: false

env:
  test_verbosity: minimal
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  GPR_TOKEN: ${{ secrets.GPR_TOKEN }}

jobs:
  BuildAndTest:
    name: "Perform SonarCloud analysis"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3.0.3
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: Setup GPR nuget package source
        if: env.GPR_TOKEN != ''
        run: |
          if [ ! -f nuget.config ]; then
            echo "Adding nuget.config file and configuring Confuzed GPR feed"
            dotnet new nugetconfig
            dotnet nuget add source https://nuget.pkg.github.com/Confuzed/index.json --name github --username ${{ github.repository_owner }} --store-password-in-clear-text --password "${{ env.GPR_TOKEN }}" --configfile nuget.config
          else
            echo "Configuring Confuzed GPR feed in existing nuget.config"
            dotnet nuget update source github --username ${{ github.repository_owner }} --store-password-in-clear-text --password "${{ env.GPR_TOKEN }}" --configfile nuget.config
          fi

      # JDK 11 required by the SonarCloud agent
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin

      - name: SonarCloud package cache
        uses: actions/cache@v3.2.3
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Restore dotnet tools
        run: dotnet tool restore --verbosity minimal

      - name: Ensure dotnet tools are configured
        run: |
          if [ ! -f ".config/dotnet-tools.json" ]; then
            dotnet new tool-manifest
          fi
          (dotnet tool list | grep -sq gitversion.tool) || dotnet tool install gitversion.tool
          (dotnet tool list | grep -sq dotnet-sonarscanner) || dotnet tool install dotnet-sonarscanner
          
      - name: Execute GitVersion
        run: |
          dotnet tool run dotnet-gitversion -output buildserver

      - name: NuGet Cache
        uses: actions/cache@v3.2.3
        env:
          NUGET_CACHE_KEY: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        with:
          path: ~/.nuget/packages
          key: ${{ env.NUGET_CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Bring up services using docker-compose
        if: inputs.dockerComposeFile != ''
        id: docker-compose
        run: |
          COMPOSE_FILE="${{ inputs.dockerComposeFile }}"
          if [ -f "${COMPOSE_FILE}" ]; then
            docker-compose -f "${COMPOSE_FILE}" up -d
            echo "DOCKER_COMPOSE_UP=1" >> $GITHUB_OUTPUT
          else
            echo "DOCKER_COMPOSE_UP=0" >> $GITHUB_OUTPUT
          fi

      - name: Begin SonarCloud analysis
        run: |
          dotnet tool run dotnet-sonarscanner begin /k:"${{ inputs.sonarProjectKey }}" /o:"${{ inputs.sonarOrg }}" /v:"${{ env.GitVersion_FullSemVer }}" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:"sonar.verbose=${{ inputs.sonarBeVerbose }}" /d:"sonar.cs.opencover.reportsPaths=${{ github.workspace }}/TestResults/**/*.xml" /d:"sonar.cs.vstest.reportsPaths=${{ github.workspace }}/TestResults/**/*.trx"

      - name: Run tests
        env:
          package-version: "${{ env.GitVersion_NuGetVersionV2 }}"
          assembly-version: "${{ env.GitVersion_AssemblySemVer }}"
          file-version: "${{ env.GitVersion_AssemblySemFileVer }}"
        run: dotnet test ${{ inputs.solutionFile }} --configuration ${{ inputs.buildConfiguration }} --nologo --verbosity ${{ inputs.testVerbosity }} --settings Test.runsettings -p:PackageVersion=${{ env.package-version }} -p:AssemblyVersion=${{ env.assembly-version }} -p:FileVersion=${{ env.file-version }}

      - name: End SonarCloud analysis
        if: always()
        run: dotnet tool run dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Upload test report artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: TestResults/*

      - name: Parse TRX files
        uses: NasAmin/trx-parser@v0.2.0
        with:
          TRX_PATH: ${{ github.workspace }}/TestResults
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop docker services
        if: steps.docker-compose.outputs.DOCKER_COMPOSE_UP==1
        run: docker-compose -f ${{ inputs.dockerComposeFile }} down
